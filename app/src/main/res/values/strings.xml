<resources>
    <string name="app_name">MyParking</string>
    <string name="title_home">Home</string>
    <string name="title_dashboard">Dashboard</string>
    <string name="title_notifications">Notifications</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

    <string name="title_activity_maps">Map</string>
    <string name="title_activity_main2">Main2Activity</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">Slideshow</string>
    <string name="menu_tools">Tools</string>
    <string name="menu_share">Share</string>
    <string name="menu_send">Send</string>

    <string name="search_hint">Ou allez vous ?</string>
    <string name="channel_name">myparking_notif_channel</string>
    <string name="para">By specifying Behaviors for child views of a CoordinatorLayout you can provide many different interactions within a single parent and those views can also interact with one another. View classes can specify a default behavior when used as a child of a CoordinatorLayout using the CoordinatorLayout.DefaultBehavior annotation.

Behaviors may be used to implement a variety of interactions and additional layout modifications ranging from sliding drawers and panels to swipe-dismissable elements and buttons that stick to other elements as they move and animate.

Children of a CoordinatorLayout may have an anchor. This view id must correspond to an arbitrary descendant of the CoordinatorLayout, but it may not be the anchored child itself or a descendant of the anchored child. This can be used to place floating views relative to other arbitrary content panes.

Children can specify insetEdge to describe how the view insets the CoordinatorLayout. Any child views which are set to dodge the same inset edges by dodgeInsetEdges will be moved appropriately so that the views do not overlap.</string>


    <string name="my_preference">"com.abc.com.MyPref"</string>
    <string name="my_preference_key">"com.abc.com.MyPrefKey"</string>
    <string name="driver_pref">idAutomobiliste</string>


    <!--slide texts-->
    <string name="slide1_title">Recommandation intelligente</string>
    <string name="slide2_title">Guidage vers le parking</string>
    <string name="slide3_title">Réservation et garantie</string>

    <string name="slide2_description">ProPark vous guide vers votre destination en proposant le meilleur itinériare.</string>
    <string name="slide3_description">ProPark vous permet de réserver votre place parking à lavance afin de garantir la disponibilité</string>
    <string name="slide1_description">ProPark vous permet de trouvez les meilleures places parkings disponibles à proximité de votre destination.</string>

    <!-- Hints -->
    <string name="username_hint">Nom d\'utilisateur</string>
    <string name="lastname_hint">Nom</string>
    <string name="firstname_hint">Prénom</string>
    <string name="mail_hint">Email</string>
    <string name="num_hint">Numéro téléphone</string>
    <string name="password_hint">Mot de passe</string>
    <string name="password_confirm_hint">Confirmez le mot de passe</string>

    <!-- Button -->
    <string name="connecter_bn">Se connecter</string>
    <string name="connecter_fb_bn">Se connecter avec facebook</string>
    <string name="create_account_bn">Creer un compte</string>
    <string name="create_acc_fb_bn">S\'inscrire avec facebook</string>

    <!-- Links -->
    <string name="forgotton_pwd_link"><u>Mot de passe oublié?</u></string>
    <string name="create_account_link"><u>Créer un compte</u></string>

    <string name="or">OU</string>
    <string name="image_desc">image</string>
    <string name="contract_terms">J\'accepte les Termes et Conditions</string>
    <string name="ignorer">IGNORER</string>
    <string name="horaire">Horaire</string>
    <string name="tarifs">Tarifs</string>
    <string name="paiement">Paiement</string>
    <string name="equipements">Equipements</string>
    <string name="temps_total">Temps total</string>
    <string name="success_message">Vous avez réserver une place de stationnement avec succès !</string>
    <string name="congrats">Félicitations</string>
    <string name="see_more">Voir details</string>
    <string name="termes_et_conditions">Termes et Conditions</string>
    <string name="facebook_app_id">504447433549983</string>
    <string name="fb_login_protocol_scheme">fb1495353293973396</string>
    <string name="title_activity_scrolling">ScrollingActivity</string>
    <string name="large_text">
        "Material is the metaphor.\n\n"

        "A material metaphor is the unifying theory of a rationalized space and a system of motion."
        "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
        "technologically advanced and open to imagination and magic.\n"
        "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
        "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
        "flexibility of the material creates new affordances that supercede those in the physical "
        "world, without breaking the rules of physics.\n"
        "The fundamentals of light, surface, and movement are key to conveying how objects move, "
        "interact, and exist in space and in relation to each other. Realistic lighting shows "
        "seams, divides space, and indicates moving parts.\n\n"

        "Bold, graphic, intentional.\n\n"

        "The foundational elements of print based design typography, grids, space, scale, color, "
        "and use of imagery guide visual treatments. These elements do far more than please the "
        "eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
        "imagery, large scale typography, and intentional white space create a bold and graphic "
        "interface that immerse the user in the experience.\n"
        "An emphasis on user actions makes core functionality immediately apparent and provides "
        "waypoints for the user.\n\n"

        "Motion provides meaning.\n\n"

        "Motion respects and reinforces the user as the prime mover. Primary user actions are "
        "inflection points that initiate motion, transforming the whole design.\n"
        "All action takes place in a single environment. Objects are presented to the user without "
        "breaking the continuity of experience even as they transform and reorganize.\n"
        "Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
        "Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

        "3D world.\n\n"

        "The material environment is a 3D space, which means all objects have x, y, and z "
        "dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
        "positive z-axis extending towards the viewer. Every sheet of material occupies a single "
        "position along the z-axis and has a standard 1dp thickness.\n"
        "On the web, the z-axis is used for layering and not for perspective. The 3D world is "
        "emulated by manipulating the y-axis.\n\n"

        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>
</resources>
